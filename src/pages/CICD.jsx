
export default function CICD() {
  return (
    <div>
      <h2 className="text-3xl font-bold mb-6 text-pokeYellow">Integra√ß√£o Cont√≠nua e Deploy (CI/CD)</h2>

      <div className="mb-6">
        <p className="font-semibold mb-2">Integra√ß√£o Cont√≠nua: GitHub ‚Üí Jenkins ‚Üí DockerHub</p>
        <img src="/cd.png" alt="Integra√ß√£o Cont√≠nua: GitHub ‚Üí Jenkins ‚Üí DockerHub" className="mx-auto block" />
      </div>

      <p className="mb-4">
        A aplica√ß√£o <strong>Pok√©Crawler</strong> implementa uma pipeline completa de <strong>CI/CD</strong> (Integra√ß√£o Cont√≠nua e Entrega Cont√≠nua), com o objetivo de automatizar todos os passos desde o desenvolvimento at√© ao deploy final.
      </p>

      <p className="mb-4">
        Esta automa√ß√£o foi constru√≠da com as seguintes tecnologias:
      </p>

      <ul className="list-disc pl-6 mb-6">
        <li><strong>GitHub</strong> ‚Äì Reposit√≥rio de c√≥digo-fonte monitorizado</li>
        <li><strong>DockerHub</strong> ‚Äì Armazenamento das imagens Docker p√∫blicas/privadas</li>
        <li><strong>Jenkins</strong> ‚Äì Motor de automa√ß√£o CI/CD</li>
        <li><strong>Ansible</strong> ‚Äì Orquestra√ß√£o final dos servi√ßos e containers</li>
      </ul>

      <p className="mb-4">
        Para integra√ß√£o cont√≠nua via webhooks, o servi√ßo <strong>Ngrok</strong> pode ser usado para expor o Jenkins localmente e permitir triggers autom√°ticos do GitHub.
      </p>

      <p className="font-semibold mb-2">üöÄ Fluxo da pipeline:</p>
      <ol className="list-decimal pl-6 mb-6">
        <li>O Jenkins detecta altera√ß√µes no reposit√≥rio GitHub</li>
        <li>Faz pull do c√≥digo e executa o <code>Jenkinsfile</code></li>
        <li>Constr√≥i as imagens Docker (frontend, backend, crawler)</li>
        <li>Faz push para o DockerHub com a tag especificada</li>
        <li>Executa o playbook do Ansible para fazer o deploy</li>
        <li>Em caso de erro, envia email com detalhes do problema</li>
      </ol>

      <h3 className="text-xl font-semibold mb-2">üõ†Ô∏è Jenkinsfile</h3>
      <p className="mb-4">
        O ficheiro <code>Jenkinsfile</code> est√° na raiz do projeto e define toda a l√≥gica da pipeline. Est√° parametrizado com as vari√°veis:
      </p>

      <ul className="list-disc pl-6 mb-4">
        <li><code>BRANCH</code> ‚Äì Branch a ser usada (default: <code>main</code>)</li>
        <li><code>TAG</code> ‚Äì Tag usada nas imagens Docker (ex: <code>latest</code>, <code>v1.0</code>)</li>
      </ul>

      <p className="mb-4">Exemplo de etapa no Jenkinsfile:</p>
      <pre className="bg-gray-100 p-4 rounded text-sm overflow-x-auto mb-6">
{`stage('Build and Publish Frontend') {
  steps {
    dir('frontend') {
      sh 'docker build -t user/frontend:\${params.TAG} .'
      sh 'docker push user/frontend:\${params.TAG}'
    }
  }
}`}
      </pre>

      <p className="mb-4">
        O login no DockerHub √© feito com credenciais armazenadas de forma segura no Jenkins, atrav√©s do <code>credentialsId</code>.
      </p>

      <h3 className="text-xl font-semibold mb-2">üì¨ Notifica√ß√£o por e-mail em caso de erro:</h3>
      <p className="mb-4">
        A pipeline envia automaticamente um email com o erro caso alguma etapa falhe. O corpo do email inclui:
      </p>

      <ul className="list-disc pl-6 mb-6">
        <li>Nome da pipeline</li>
        <li>N√∫mero da build</li>
        <li>Stage onde ocorreu o erro</li>
        <li>Link para o log completo</li>
        <li>Commit e autor</li>
      </ul>

      <pre className="bg-gray-100 p-4 rounded text-sm overflow-x-auto mb-6">
{`post {
  failure {
    mail to: "\${EMAIL_TO}",
      subject: "üö® Falha na Pipeline: \${env.JOB_NAME} #\${env.BUILD_NUMBER}",
      body: "Verifica os logs em: \${env.BUILD_URL}\nCommit: \${env.GIT_COMMIT}\nAutor: \${env.COMMIT_AUTHOR}"
  }
}`}
      </pre>

      <h3 className="text-xl font-semibold mb-2">üì¶ DockerHub</h3>
      <p className="mb-4">
        As imagens Docker s√£o publicadas automaticamente com tags espec√≠ficas por vers√£o. Est√£o organizadas por servi√ßo:
      </p>

      <ul className="list-disc pl-6 mb-6">
        <li><code>user/backend:latest</code></li>
        <li><code>user/frontend:latest</code></li>
        <li><code>user/crawler:latest</code></li>
      </ul>

      <h3 className="text-xl font-semibold mb-2">üß© Deploy com Ansible</h3>
      <p className="mb-4">
        Ap√≥s a publica√ß√£o das imagens, o Jenkins executa automaticamente o <code>ansible-playbook</code> correspondente, atualizando os containers no servidor remoto.
      </p>

      <pre className="bg-gray-100 p-4 rounded text-sm overflow-x-auto mb-6">
ansible-playbook -i ansible/inventory/dev/hosts ansible/playbooks/site.yml
      </pre>

      <div className="mb-6">
        <p className="font-semibold mb-2">Entrega Cont√≠nua: Jenkins ‚Üí Ansible ‚Üí Containers</p>
        <img src="/ci.png" alt="Entrega Cont√≠nua: Jenkins ‚Üí Ansible ‚Üí Containers" className="mx-auto block" />
      </div>

      <p>
        Esta integra√ß√£o total garante que qualquer <strong>push no reposit√≥rio pode disparar automaticamente</strong> o ciclo completo de build ‚Üí publica√ß√£o ‚Üí deploy, com feedback imediato via email em caso de falha.
      </p>
    </div>
  );
}